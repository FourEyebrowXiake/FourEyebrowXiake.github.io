{"version":3,"sources":["webpack:///path---函数是一等公民-背后的含义-fd6e5ef561deebe0ffc3.js","webpack:///./.cache/json/函数是一等公民-背后的含义.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/函数是一等公民-背后的含义.json","module","exports","data","site","meta","title","description","author","post","id","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,uEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,MAAQC,MAAA,UAAAC,YAAA,oKAAAC,OAAA,YAAwNC,MAASC,GAAA,2IAAAC,KAAA,873BAAg6yBC,aAAwyHC,OAAA,OAAAP,MAAA,iBAAAQ,KAAA,iBAAAC,YAAA,MAAAC,KAAA,gBAA2GC,aAAgBH,KAAA","file":"path---函数是一等公民-背后的含义-fd6e5ef561deebe0ffc3.js","sourcesContent":["webpackJsonp([197665681910993],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/函数是一等公民-背后的含义.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"四条眉毛的博客\",\"description\":\"I'm Lin Jin , a web developer and a travel enthusiasts. My target is to write clean and efficient code, to solve poblems on the web and to learn something more. \",\"author\":\"Lin Jin\"}},\"post\":{\"id\":\"/Users/fourfish/Desktop/gatsby-starter-bootstrap/src/pages/articles/2017-11-15-函数是一等公民-背后的含义/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>原文链接：</h1>\\n<ul>\\n<li><a href=\\\"http://blog.leapoahead.com/2015/09/19/function-as-first-class-citizen/\\\">“函数是一等公民”背后的含义\\n</a></li>\\n</ul>\\n<p>在学习一些语言的时候，你经常会听到“函数是一等公民”这样的描述。那么究竟函数在这类语言中扮演着怎么样的一个角色？它和函数式编程、无状态设计、封装抽象有什么千丝万缕的联系？</p>\\n<p>在本文中，我们用JavaScript为例，娓娓道来这其中的故事。当然了，只是我发现的这一部分……</p>\\n<h1>时间的奥秘</h1>\\n<p>我们从最简单的五行代码说起。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> add <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>是的，我写JavaScript不加分号。当然，关键不是这个……</p>\\n<p>我们可以很轻松地写出关于这个函数的测试用例来。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return a + b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>should<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>但是如果我们引入一个全局的变量C。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">function</span> addWithC <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token operator\\\">+</span> C\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 7</span>\\n</code></pre>\\n      </div>\\n<p>这个代码看起来还是很好测试的，只要你在测试中也能访问到C这个变量。你修改两三次C的值，然后运行几次被测试的函数，大概地看下结果是不是正确“就行了”。</p>\\n<p>慢着，看似平静的表象下，就是一切问题的开始。我们编写一个函数，里面只是简单地调用addWithC。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> foo <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>foo在这里成为了addWithC的一个抽象。你怎么样较为全面地测试foo？很显然，你依然还是要在它的测试里面去引用到C。</p>\\n<p>好的，在这里，C就成为了一种状态(State)，它的变化可以左右函数的输出。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\nC <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<p>第二句C = 1的玄妙之处在于，它在这三行代码中创建了“时间”这个纬度。你可能在想，这是什么鬼话？</p>\\n<p>别急，请仔细看。在阅读这份代码的时候，我们会说：</p>\\n<blockquote>\\n<p>在C = 1之前，addWithC(1, 2)的结果是3；在C = 1之后，addWithC(1, 2)的结果是4。</p>\\n</blockquote>\\n<p>看，这不就是时间吗？我们在这里有了之前和之后的概念。这也称作“副作用” —— C的变化对addWithC的结果产生了副作用。</p>\\n<p>如果我们回到引用C这个状态之前的add函数呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 9</span>\\n</code></pre>\\n      </div>\\n<p>我们会说：</p>\\n<blockquote>\\n<p>add(1, 2)的结果就是3；add(4, 5)的结果就是9</p>\\n</blockquote>\\n<p>add比addWithC来得好测试。为什么呢？因为对于固定的输入，add总是可以有固定的输出。但是addWithC并不是这样的，因为在不同的“时间”里（也就是状态取不同的值的时候），它对于同样的输入，不一定有同样的输出。</p>\\n<p>其实这一点在编写测试的时候，编写行为描述的时候就可以发现了。在进行行为驱动开发编写行为描述的时候，我们应该描述清楚被测函数的下面几个方面</p>\\n<p>它所期待的输入是什么</p>\\n<ul>\\n<li>输入所对应的输出是什么</li>\\n<li>例如，对于add，我就可以写道</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a and b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>对于addWithC，我们要写</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a, b and an external C'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>看到了吧，通过编写行为描述，我们发现在单元测试中，竟然还引入了外部变量。这还能叫单元测试吗？</p>\\n<p>很多时候，我们可能会选择破例在单元测试里面引入状态，而不去思考重新修改代码。因此，系统中引入了越来越多的状态，直到混乱不堪，难以测试……</p>\\n<p>所以我们看到，在这里，状态是导致混乱的最主要原因。实际上，它也是导致很多系统难以测试，经常崩溃的原因。</p>\\n<h1>外部量C何去何从？</h1>\\n<p>但是在很多时候，我们是必须要依赖一些外部的量的，比如刚才的C。我们不希望引入状态，那么就有一个办法，那就是让C变成常量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<p>这让它人不再能够修改这个量，那么我们就不必要在测试中引入C这个常量了。测试addWithC的代码就可以变得非常地简单：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'addWithC'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a, b and constant C (which is 1)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>should<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 没有副作用</span>\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 不会有时间的概念</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>让我们思考得更深一点，常量就是什么？实际上就是一个返回固定值的函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 等价于</span>\\n<span class=\\\"token keyword\\\">function</span> C <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>因此addWithC实际上可以是这样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">C</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>那么这个时候，我们发现C和addWithC都符合一个原则。</p>\\n<blockquote>\\n<p>输出仅取决于输入的参数。</p>\\n</blockquote>\\n<p>对于这样的函数，我们又称之为纯函数（Pure function），这个概念非常地重要。</p>\\n<p>奇妙的事情发生了。在一个无状态（Stateless）的世界里，所有的常量都被替换成返回固定值的函数，整个程序的运行无非就是一系列的函数调用。而且，这些函数还都是纯函数！等等，这难道不就是——</p>\\n<blockquote>\\n<p>函数是一等公民。（Function is first-class citizen）</p>\\n</blockquote>\\n<p>这是学过JavaScript语言的人都耳熟能详一句话了，但是还是不够准确。毕竟在无状态的世界里，我们就可以用函数来抽象出所有的量了，那么更准确地说——</p>\\n<blockquote>\\n<p>函数是唯一的一等公民。（Function is the one and only first-class citizen）</p>\\n</blockquote>\\n<p>我还是不满意，我必须强调“纯函数”这个概念。</p>\\n<blockquote>\\n<p>纯函数是唯一的一等公民。（Pure function is the one and only first-class citizen）</p>\\n</blockquote>\\n<p>这样做的目的只有一个，<strong>没有副作用</strong>。</p>\\n<p>好了，所有复杂的问题都解决了，我们不要变量，只要常量，所有的事情都用一层层的纯函数调用来解决。程序员们解散吧，这么简单的事情，用不着那么多人来做……</p>\\n<p>呵呵。</p>\\n<h1>无状态的乌托邦</h1>\\n<p>上面说的这个世界太理想了。</p>\\n<p>程序语言给予了我们赋值的能力，给予了我们变量，难道我们就轻易地将它们抛弃吗？当然不是的。在一个局限的小范围内，实际上使用状态还是没有问题的。例如，一个简单的for循环本身也是Stateful的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> upperBound <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> upperBound<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result <span class=\\\"token operator\\\">+=</span> i\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的result本身依赖于i的取值，i也是一个状态。但是，如果它们被放在一个函数里：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> seriesSum <span class=\\\"token punctuation\\\">(</span>upperBound<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> upperBound<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        result <span class=\\\"token operator\\\">+=</span> i\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>我们来审视seriesSum。其输出依然是取决于其输入，哦耶！它还是一个纯函数，虽然它内部不是纯函数。seriesSum依然是一个很容易测试的单元。</p>\\n<p>需要注意的一点是，如果一个函数的输出取决于一个非纯函数的输出的话，那么它一定也不是纯函数。例如下面的场景中</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> foo <span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 这不是一个纯函数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> bar <span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 结果依赖于foo，依然不是一个纯函数</span>\\n    result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">...</span>\\n    <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>依赖注入（Dependency Injection）</h1>\\n<p>如果你接触过Angular.js，你一定知道依赖注入（Dependency Injection）。</p>\\n<p>纯函数之所以易于测试，从某种角度上说是因为它的所有依赖就是它的参数，所以我们可以很容易地在测试的时候模拟其所有需要的依赖的变化进行测试。</p>\\n<p>依赖注入通过给所有我们需要用到的函数、量统一包装，也能实现类似的效果。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>angular<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myModule'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'serviceId'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">directive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'directiveName'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filterName'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>例如在上面的例子中，如果我们要测试serviceId、directiveName或者filterName的话，那么只需要注入depService就好了。所以，依赖注入提供了跟虚函数一样的依赖跟踪性质，并且相对而言更加分散。但是依赖注入并不能保证每个模块暴露出来的都是虚函数。</p>\\n<h1>面向对象怎么办？</h1>\\n<p>好问题。（咦，好像夸的是我自己……）</p>\\n<p>一个对象内部的属性如果发生了变化，那么这个对象本质上就不再是之前那个对象了。例如下面的类：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span> <span class=\\\"token punctuation\\\">{</span>\\n    constructor <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nmyObj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// myObj.someVar变化了</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 她便再也不是从前那个专一（1）的她…</span>\\n</code></pre>\\n      </div>\\n<p>我们不希望这样的事情发生，但又希望做出良好的封装性，那么怎么办呢？答案是让类实例不可变（Immuatable）。每次在对象内部的属性变化的时候，我们不直接修改这个对象，而是返回一个新的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span> <span class=\\\"token punctuation\\\">{</span>\\n    constructor <span class=\\\"token punctuation\\\">(</span>someVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">=</span> someVar\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\n<span class=\\\"token keyword\\\">var</span> mySecondObj <span class=\\\"token operator\\\">=</span> myObj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>mySecondObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 两者不指向同样的内存区域，故为false</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj <span class=\\\"token operator\\\">==</span> mySecondObj<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>这样做的理由很简单，产生一个新的对象不会对现有的对象产生影响，因此这个操作是没有副作用的，符合我们前面提到的我们的目标。</p>\\n<p>在JavaScript的世界里面，我们有Immutable.js。Immutable.js封装了JavaScript原生类型的Immutable版本。例如Immutable.Map就是一个例子。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> map1 <span class=\\\"token operator\\\">=</span> Immutable<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> map2 <span class=\\\"token operator\\\">=</span> map1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmap1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\nmap2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 50</span>\\n</code></pre>\\n      </div>\\n<p>实际上，在immutable的世界里，每一个对象永远都是它自己，不会被修改。所以，它可以被视为一个常量，被视为一个返回常量的值。这里精彩的部分在于：</p>\\n<p>Hey，Immutable将变量给常量化了！</p>\\n<p>显而易见，这样做看似会导致很多不必要的内存开销。其实Immutable数据结构本身会重复利用很多的内存空间，例如链表、Map之类的数据结构，库都会尽量重用可以重用的部分。</p>\\n<p>在实在无法重用的时候，完全复制在99%的情况下也是没有任何问题的。现在内存那么便宜，你确定你真的对那不必要的几KB几MB的开销很上心吗？大部分时候，并没有必要节约那一点内存，尤其是在浏览器端。</p>\\n<h1>JavaScript与函数式编程</h1>\\n<p>最后回到我们最熟悉的JavaScript的函数式编程上来，验证我们之前的一些发现。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 输出3 4</span>\\n</code></pre>\\n      </div>\\n<p>首先，map、filter返回的都是一个新的数组，不对原有的数组进行修改。这里就表现出了Immutable的特性。其次，我们注意到map、filter和forEach函数都不依赖外界的状态。因此我们可以很容易地把它们拉出来测试。</p>\\n<p>如果我们依赖了外界的状态，那么就再也不是函数式编程了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">+</span> C<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>总结下来，保持两点可以让我们的应用维护、测试复杂度显著降低。</p>\\n<p>第一点就是编写纯函数，保持Stateless，并对其进行测试。需要记住的是，我们不需要将所有的东西都变成Stateless的，至于如何设计那就真的是看经验了。</p>\\n<p>第二点就是应用Immutable数据结构，将变量常量化。</p>\\n<p>无论采用什么方法，总体目标就是消除副作用。这也是函数作为一等公民，将过程和量统一背后的实际意义。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"“函数是一等公民”背后的含义\",\"path\":\"/函数是一等公民-背后的含义\",\"categories\":[\"转载\"],\"date\":\"2017/11/15\"}}},\"pathContext\":{\"path\":\"/函数是一等公民-背后的含义\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---函数是一等公民-背后的含义-fd6e5ef561deebe0ffc3.js","module.exports = {\"data\":{\"site\":{\"meta\":{\"title\":\"四条眉毛的博客\",\"description\":\"I'm Lin Jin , a web developer and a travel enthusiasts. My target is to write clean and efficient code, to solve poblems on the web and to learn something more. \",\"author\":\"Lin Jin\"}},\"post\":{\"id\":\"/Users/fourfish/Desktop/gatsby-starter-bootstrap/src/pages/articles/2017-11-15-函数是一等公民-背后的含义/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h1>原文链接：</h1>\\n<ul>\\n<li><a href=\\\"http://blog.leapoahead.com/2015/09/19/function-as-first-class-citizen/\\\">“函数是一等公民”背后的含义\\n</a></li>\\n</ul>\\n<p>在学习一些语言的时候，你经常会听到“函数是一等公民”这样的描述。那么究竟函数在这类语言中扮演着怎么样的一个角色？它和函数式编程、无状态设计、封装抽象有什么千丝万缕的联系？</p>\\n<p>在本文中，我们用JavaScript为例，娓娓道来这其中的故事。当然了，只是我发现的这一部分……</p>\\n<h1>时间的奥秘</h1>\\n<p>我们从最简单的五行代码说起。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> add <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>是的，我写JavaScript不加分号。当然，关键不是这个……</p>\\n<p>我们可以很轻松地写出关于这个函数的测试用例来。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'add'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return a + b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>should<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>但是如果我们引入一个全局的变量C。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token keyword\\\">function</span> addWithC <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token operator\\\">+</span> C\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 7</span>\\n</code></pre>\\n      </div>\\n<p>这个代码看起来还是很好测试的，只要你在测试中也能访问到C这个变量。你修改两三次C的值，然后运行几次被测试的函数，大概地看下结果是不是正确“就行了”。</p>\\n<p>慢着，看似平静的表象下，就是一切问题的开始。我们编写一个函数，里面只是简单地调用addWithC。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> foo <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>foo在这里成为了addWithC的一个抽象。你怎么样较为全面地测试foo？很显然，你依然还是要在它的测试里面去引用到C。</p>\\n<p>好的，在这里，C就成为了一种状态(State)，它的变化可以左右函数的输出。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\nC <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 4</span>\\n</code></pre>\\n      </div>\\n<p>第二句C = 1的玄妙之处在于，它在这三行代码中创建了“时间”这个纬度。你可能在想，这是什么鬼话？</p>\\n<p>别急，请仔细看。在阅读这份代码的时候，我们会说：</p>\\n<blockquote>\\n<p>在C = 1之前，addWithC(1, 2)的结果是3；在C = 1之后，addWithC(1, 2)的结果是4。</p>\\n</blockquote>\\n<p>看，这不就是时间吗？我们在这里有了之前和之后的概念。这也称作“副作用” —— C的变化对addWithC的结果产生了副作用。</p>\\n<p>如果我们回到引用C这个状态之前的add函数呢？</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 3</span>\\n<span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 9</span>\\n</code></pre>\\n      </div>\\n<p>我们会说：</p>\\n<blockquote>\\n<p>add(1, 2)的结果就是3；add(4, 5)的结果就是9</p>\\n</blockquote>\\n<p>add比addWithC来得好测试。为什么呢？因为对于固定的输入，add总是可以有固定的输出。但是addWithC并不是这样的，因为在不同的“时间”里（也就是状态取不同的值的时候），它对于同样的输入，不一定有同样的输出。</p>\\n<p>其实这一点在编写测试的时候，编写行为描述的时候就可以发现了。在进行行为驱动开发编写行为描述的时候，我们应该描述清楚被测函数的下面几个方面</p>\\n<p>它所期待的输入是什么</p>\\n<ul>\\n<li>输入所对应的输出是什么</li>\\n<li>例如，对于add，我就可以写道</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a and b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>对于addWithC，我们要写</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a, b and an external C'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>看到了吧，通过编写行为描述，我们发现在单元测试中，竟然还引入了外部变量。这还能叫单元测试吗？</p>\\n<p>很多时候，我们可能会选择破例在单元测试里面引入状态，而不去思考重新修改代码。因此，系统中引入了越来越多的状态，直到混乱不堪，难以测试……</p>\\n<p>所以我们看到，在这里，状态是导致混乱的最主要原因。实际上，它也是导致很多系统难以测试，经常崩溃的原因。</p>\\n<h1>外部量C何去何从？</h1>\\n<p>但是在很多时候，我们是必须要依赖一些外部的量的，比如刚才的C。我们不希望引入状态，那么就有一个办法，那就是让C变成常量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n</code></pre>\\n      </div>\\n<p>这让它人不再能够修改这个量，那么我们就不必要在测试中引入C这个常量了。测试addWithC的代码就可以变得非常地简单：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">describe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'addWithC'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">it</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'should return sum of a, b and constant C (which is 1)'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>should<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 没有副作用</span>\\n        <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 不会有时间的概念</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>让我们思考得更深一点，常量就是什么？实际上就是一个返回固定值的函数。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 等价于</span>\\n<span class=\\\"token keyword\\\">function</span> C <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>因此addWithC实际上可以是这样的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">addWithC</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> a <span class=\\\"token operator\\\">+</span> b <span class=\\\"token operator\\\">+</span> <span class=\\\"token function\\\">C</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>那么这个时候，我们发现C和addWithC都符合一个原则。</p>\\n<blockquote>\\n<p>输出仅取决于输入的参数。</p>\\n</blockquote>\\n<p>对于这样的函数，我们又称之为纯函数（Pure function），这个概念非常地重要。</p>\\n<p>奇妙的事情发生了。在一个无状态（Stateless）的世界里，所有的常量都被替换成返回固定值的函数，整个程序的运行无非就是一系列的函数调用。而且，这些函数还都是纯函数！等等，这难道不就是——</p>\\n<blockquote>\\n<p>函数是一等公民。（Function is first-class citizen）</p>\\n</blockquote>\\n<p>这是学过JavaScript语言的人都耳熟能详一句话了，但是还是不够准确。毕竟在无状态的世界里，我们就可以用函数来抽象出所有的量了，那么更准确地说——</p>\\n<blockquote>\\n<p>函数是唯一的一等公民。（Function is the one and only first-class citizen）</p>\\n</blockquote>\\n<p>我还是不满意，我必须强调“纯函数”这个概念。</p>\\n<blockquote>\\n<p>纯函数是唯一的一等公民。（Pure function is the one and only first-class citizen）</p>\\n</blockquote>\\n<p>这样做的目的只有一个，<strong>没有副作用</strong>。</p>\\n<p>好了，所有复杂的问题都解决了，我们不要变量，只要常量，所有的事情都用一层层的纯函数调用来解决。程序员们解散吧，这么简单的事情，用不着那么多人来做……</p>\\n<p>呵呵。</p>\\n<h1>无状态的乌托邦</h1>\\n<p>上面说的这个世界太理想了。</p>\\n<p>程序语言给予了我们赋值的能力，给予了我们变量，难道我们就轻易地将它们抛弃吗？当然不是的。在一个局限的小范围内，实际上使用状态还是没有问题的。例如，一个简单的for循环本身也是Stateful的。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> upperBound <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> upperBound<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    result <span class=\\\"token operator\\\">+=</span> i\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的result本身依赖于i的取值，i也是一个状态。但是，如果它们被放在一个函数里：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> seriesSum <span class=\\\"token punctuation\\\">(</span>upperBound<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> upperBound<span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        result <span class=\\\"token operator\\\">+=</span> i\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>我们来审视seriesSum。其输出依然是取决于其输入，哦耶！它还是一个纯函数，虽然它内部不是纯函数。seriesSum依然是一个很容易测试的单元。</p>\\n<p>需要注意的一点是，如果一个函数的输出取决于一个非纯函数的输出的话，那么它一定也不是纯函数。例如下面的场景中</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> foo <span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 这不是一个纯函数</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> bar <span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 结果依赖于foo，依然不是一个纯函数</span>\\n    result <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">foo</span><span class=\\\"token punctuation\\\">(</span>arg1<span class=\\\"token punctuation\\\">,</span> arg2<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token operator\\\">...</span>\\n    <span class=\\\"token keyword\\\">return</span> result\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h1>依赖注入（Dependency Injection）</h1>\\n<p>如果你接触过Angular.js，你一定知道依赖注入（Dependency Injection）。</p>\\n<p>纯函数之所以易于测试，从某种角度上说是因为它的所有依赖就是它的参数，所以我们可以很容易地在测试的时候模拟其所有需要的依赖的变化进行测试。</p>\\n<p>依赖注入通过给所有我们需要用到的函数、量统一包装，也能实现类似的效果。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>angular<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">module</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'myModule'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">factory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'serviceId'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">directive</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'directiveName'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'filterName'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'depService'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>depService<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>例如在上面的例子中，如果我们要测试serviceId、directiveName或者filterName的话，那么只需要注入depService就好了。所以，依赖注入提供了跟虚函数一样的依赖跟踪性质，并且相对而言更加分散。但是依赖注入并不能保证每个模块暴露出来的都是虚函数。</p>\\n<h1>面向对象怎么办？</h1>\\n<p>好问题。（咦，好像夸的是我自己……）</p>\\n<p>一个对象内部的属性如果发生了变化，那么这个对象本质上就不再是之前那个对象了。例如下面的类：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span> <span class=\\\"token punctuation\\\">{</span>\\n    constructor <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nmyObj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// myObj.someVar变化了</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 她便再也不是从前那个专一（1）的她…</span>\\n</code></pre>\\n      </div>\\n<p>我们不希望这样的事情发生，但又希望做出良好的封装性，那么怎么办呢？答案是让类实例不可变（Immuatable）。每次在对象内部的属性变化的时候，我们不直接修改这个对象，而是返回一个新的对象。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span> <span class=\\\"token punctuation\\\">{</span>\\n    constructor <span class=\\\"token punctuation\\\">(</span>someVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">=</span> someVar\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>someVar <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\n<span class=\\\"token keyword\\\">var</span> mySecondObj <span class=\\\"token operator\\\">=</span> myObj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">incSomeVar</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 1</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>mySecondObj<span class=\\\"token punctuation\\\">.</span>someVar<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 两者不指向同样的内存区域，故为false</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>myObj <span class=\\\"token operator\\\">==</span> mySecondObj<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>这样做的理由很简单，产生一个新的对象不会对现有的对象产生影响，因此这个操作是没有副作用的，符合我们前面提到的我们的目标。</p>\\n<p>在JavaScript的世界里面，我们有Immutable.js。Immutable.js封装了JavaScript原生类型的Immutable版本。例如Immutable.Map就是一个例子。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> map1 <span class=\\\"token operator\\\">=</span> Immutable<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>a<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> map2 <span class=\\\"token operator\\\">=</span> map1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">50</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nmap1<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 2</span>\\nmap2<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'b'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 50</span>\\n</code></pre>\\n      </div>\\n<p>实际上，在immutable的世界里，每一个对象永远都是它自己，不会被修改。所以，它可以被视为一个常量，被视为一个返回常量的值。这里精彩的部分在于：</p>\\n<p>Hey，Immutable将变量给常量化了！</p>\\n<p>显而易见，这样做看似会导致很多不必要的内存开销。其实Immutable数据结构本身会重复利用很多的内存空间，例如链表、Map之类的数据结构，库都会尽量重用可以重用的部分。</p>\\n<p>在实在无法重用的时候，完全复制在99%的情况下也是没有任何问题的。现在内存那么便宜，你确定你真的对那不必要的几KB几MB的开销很上心吗？大部分时候，并没有必要节约那一点内存，尤其是在浏览器端。</p>\\n<h1>JavaScript与函数式编程</h1>\\n<p>最后回到我们最熟悉的JavaScript的函数式编程上来，验证我们之前的一些发现。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 输出3 4</span>\\n</code></pre>\\n      </div>\\n<p>首先，map、filter返回的都是一个新的数组，不对原有的数组进行修改。这里就表现出了Immutable的特性。其次，我们注意到map、filter和forEach函数都不依赖外界的状态。因此我们可以很容易地把它们拉出来测试。</p>\\n<p>如果我们依赖了外界的状态，那么就再也不是函数式编程了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> C <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> i <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">+</span> C<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h1>总结</h1>\\n<p>总结下来，保持两点可以让我们的应用维护、测试复杂度显著降低。</p>\\n<p>第一点就是编写纯函数，保持Stateless，并对其进行测试。需要记住的是，我们不需要将所有的东西都变成Stateless的，至于如何设计那就真的是看经验了。</p>\\n<p>第二点就是应用Immutable数据结构，将变量常量化。</p>\\n<p>无论采用什么方法，总体目标就是消除副作用。这也是函数作为一等公民，将过程和量统一背后的实际意义。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"“函数是一等公民”背后的含义\",\"path\":\"/函数是一等公民-背后的含义\",\"categories\":[\"转载\"],\"date\":\"2017/11/15\"}}},\"pathContext\":{\"path\":\"/函数是一等公民-背后的含义\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/函数是一等公民-背后的含义.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/函数是一等公民-背后的含义.json\n// module chunks = 197665681910993"],"sourceRoot":""}